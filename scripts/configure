#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2021 Aaron Dewes <aaron.dewes@protonmail.com>
#
# SPDX-License-Identifier: MIT

import sys
import os
from lib.rpcauth import get_data
import re
import subprocess
import json

# Print an error if the user isn't running on Linux.
if sys.platform != 'linux':
    print('This script only works on Linux!')
    exit(1)

# Print an error if user is not root
if os.getuid() != 0:
  print('This script must be run as root!')
  exit(1)

# Check if the system is arm64 or amd64
def is_arm64():
  return subprocess.check_output(['uname', '-m']).decode('utf-8').strip() == 'aarch64'
def is_amd64():
  return subprocess.check_output(['uname', '-m']).decode('utf-8').strip() == 'x86_64'

if not is_arm64() and not is_amd64():
  print('Umbrel only works on arm64 and amd64!')
  exit(1)

# Download docker-compose from https://github.com/docker/compose/releases/download/v2.0.0-rc.3/docker-compose-linux-arm64
# or https://github.com/docker/compose/releases/download/v2.0.0-rc.3/docker-compose-linux-amd64
# and put it in $HOME/.docker/cli-plugins/docker-compose
def download_docker_compose():
  # Skip if os.path.expanduser('~/.docker/cli-plugins/docker-compose') exists
  subprocess.check_call(["mkdir", "-p", os.path.expanduser('~/.docker/cli-plugins/')])
  if os.path.exists(os.path.expanduser('~/.docker/cli-plugins/docker-compose')):
    return
  if is_arm64():
    subprocess.check_call(['wget', 'https://github.com/docker/compose/releases/download/v2.0.0-rc.3/docker-compose-linux-arm64', '-O', os.path.expanduser('~/.docker/cli-plugins/docker-compose')])
  elif is_amd64():
    subprocess.check_call(['wget', 'https://github.com/docker/compose/releases/download/v2.0.0-rc.3/docker-compose-linux-amd64', '-O', os.path.expanduser('~/.docker/cli-plugins/docker-compose')])
  os.chmod(os.path.expanduser('~/.docker/cli-plugins/docker-compose'), 0o755)


try:
    subprocess.check_call(['wget', '--version'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
except:
    print('Wget is not installed!')
    exit(1)

try:
    subprocess.check_call(['docker', '--version'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
except:
    print('Docker is not installed!')
    exit(1)

# Switch to UMBREL root directory.
UMBREL_ROOT=os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
os.chdir(UMBREL_ROOT)

status_dir = os.path.join(UMBREL_ROOT, 'statuses')
# Make sure to use the main status dir for updates
if os.path.isfile('../.umbrel'):
    status_dir = os.path.join(UMBREL_ROOT, '..', 'statuses')

# Configure for mainnet or testnet or regtest depending
# upon the user-supplied value of $NETWORK
# If the network is not specified, then use the mainnet
BITCOIN_NETWORK=os.environ.get('NETWORK') or 'mainnet'

# Check if network neither mainnet nor testnet nor regtest
if BITCOIN_NETWORK not in ['mainnet', 'testnet', 'regtest']:
    print('Error: Network must be either mainnet, testnet, or regtest!')
    exit(1)

with open(os.path.join(UMBREL_ROOT, "info.json"), 'r') as file:
  UMBREL_VERSION=json.load(file)['version']

print()
print("======================================")
if os.path.isfile(status_dir+'/configured'):
  print("=========== RECONFIGURING ============")
  reconfiguring=True
else:
  print("============ CONFIGURING =============")
  reconfiguring=False

print("============== UMBREL  ===============")
print("======================================")
print()

# Parse a dotenv file
# Values can either be KEY=VALUE or KEY="VALUE" or KEY='VALUE'
# Returns all env vars as a dict
def parse_dotenv(file_path):
  envVars: dict = {}
  with open(file_path, 'r') as file:
    for line in file:
      line = line.strip()
      if line.startswith('#') or len(line) == 0:
        continue
      if '=' in line:
        key, value = line.split('=', 1)
        value = value.strip('"').strip("'")
        envVars[key] = value
      else:
        print("Error: Invalid line in {}: {}".format(file_path, line))
        print("Line should be in the format KEY=VALUE or KEY=\"VALUE\" or KEY='VALUE'")
        exit(1)
  return envVars

  
##########################################################
############ Generate configuration variables ############
##########################################################

if reconfiguring:
  if os.path.isfile('../.umbrel'):
    dotenv=parse_dotenv('../.env')
  else:
    dotenv=parse_dotenv('./.env')

  BITCOIN_NETWORK=os.environ.get('OVERWRITE_NETWORK') or dotenv['BITCOIN_NETWORK']
  # Check if network neither mainnet nor testnet nor regtest
  if BITCOIN_NETWORK not in ['mainnet', 'testnet', 'regtest']:
      print('Error: Network must be either mainnet, testnet, or regtest!')
      exit(1)
  print("Using {} network".format(BITCOIN_NETWORK))
  print()
  BITCOIN_RPC_PORT=dotenv['BITCOIN_RPC_PORT']
  BITCOIN_P2P_PORT=dotenv['BITCOIN_P2P_PORT']
  BITCOIN_RPC_USER=dotenv['BITCOIN_RPC_USER']
  BITCOIN_RPC_PASS=dotenv['BITCOIN_RPC_PASS']
  BITCOIN_RPC_AUTH=dotenv['BITCOIN_RPC_AUTH']
  TOR_PASSWORD=dotenv['TOR_PASSWORD']
  TOR_HASHED_PASSWORD=dotenv['TOR_HASHED_PASSWORD']
else:
  # Generate RPC credentials
  print("Generating auth credentials")
  print()
  BITCOIN_RPC_USER="umbrel"
  BITCOIN_RPC_DETAILS=get_data(BITCOIN_RPC_USER)
  BITCOIN_RPC_AUTH=BITCOIN_RPC_DETAILS['auth']
  BITCOIN_RPC_PASS=BITCOIN_RPC_DETAILS['password']

  # Pull Tor image and generate Tor password
  print("Generating Tor password")
  print()
  os.system('docker pull --quiet lncm/tor:0.4.5.7')
  TOR_PASSWORD=get_data('itdoesntmatter')['password']

  # run 'docker run --rm lncm/tor:0.4.5.7 --quiet --hash-password "$TOR_PASS"' and get its output
  # this is the password that is used to connect to the Tor network
  # the password is stored in the .env file
  TOR_HASHED_PASSWORD=os.popen('docker run --rm lncm/tor:0.4.5.7 --quiet --hash-password "{}"'.format(TOR_PASSWORD)).read()[:-1]

BITCOIN_NODE="neutrino"
ALIAS_AND_COLOR=""

if os.path.isfile("./lnd/lnd.conf"):
  with open("./lnd/lnd.conf", 'r') as file:
    for line in file:
      if line.startswith("bitcoin.node="):
        BITCOIN_NODE = line.split("=")[1].strip()
      if line.startswith("alias="):
        ALIAS_AND_COLOR += "\n" + line.strip()
      if line.startswith("color="):
        ALIAS_AND_COLOR += "\n" + line.strip()

NEUTRINO_PEERS=""
if BITCOIN_NETWORK == "mainnet":
  BITCOIN_RPC_PORT=8332
  BITCOIN_P2P_PORT=8333
elif BITCOIN_NETWORK == "testnet":
  BITCOIN_RPC_PORT=18332
  BITCOIN_P2P_PORT=18333
  NEUTRINO_PEERS='''
[neutrino]
neutrino.addpeer=testnet1-btcd.zaphq.io
neutrino.addpeer=testnet2-btcd.zaphq.io
  '''
elif BITCOIN_NETWORK == "regtest":
  BITCOIN_RPC_PORT=18334
  BITCOIN_P2P_PORT=18335
  BITCOIN_NODE="bitcoind"
else:
  exit(1)

# IP addresses for services

NETWORK_IP="10.21.21.0"
GATEWAY_IP="10.21.21.1"
NGINX_IP="10.21.21.2"
NGINX_PORT=os.environ.get('NGINX_PORT') or "80"
DASHBOARD_IP="10.21.21.3"
MANAGER_IP="10.21.21.4"
MIDDLEWARE_IP="10.21.21.5"
NEUTRINO_SWITCHER_IP="10.21.21.6"
BITCOIN_IP="10.21.21.8"
BITCOIN_RPC_PORT="8332"
BITCOIN_P2P_PORT="8333"
BITCOIN_ZMQ_RAWBLOCK_PORT="28332"
BITCOIN_ZMQ_RAWTX_PORT="28333"
BITCOIN_ZMQ_HASHBLOCK_PORT="28334"
LND_IP="10.21.21.9"
LND_GRPC_PORT="10009"
LND_REST_PORT="8080"
ELECTRUM_IP="10.21.21.10"
ELECTRUM_PORT="50001"
TOR_PROXY_IP="10.21.21.11"
APPS_TOR_IP="10.21.21.47"
APPS_2_TOR_IP="10.21.21.48"
APPS_3_TOR_IP="10.21.21.49"
TOR_PROXY_PORT="9050"
TOR_CONTROL_PORT="29051"
NGINX_PORT=os.environ.get('NGINX_PORT') or "80"


# Apps
APP_THUNDERHUB_IP="10.21.21.13"
APP_THUNDERHUB_PORT="3000"
APP_SPHINX_RELAY_IP="10.21.21.14"
APP_SPHINX_RELAY_PORT="3300"
APP_RIDE_THE_LIGHTNING_IP="10.21.21.15"
APP_RIDE_THE_LIGHTNING_PORT="3001"
APP_RIDE_THE_LIGHTNING_LOOP_IP="10.21.21.16"
APP_LIGHTNING_TERMINAL_IP="10.21.21.17"
APP_LIGHTNING_TERMINAL_PORT="3004"
APP_SPECTER_DESKTOP_IP="10.21.21.18"
APP_SPECTER_DESKTOP_PORT="25441"
APP_BTCPAY_SERVER_IP="10.21.21.19"
APP_BTCPAY_SERVER_PORT="3003"
APP_BTCPAY_SERVER_NBXPLORER_IP="10.21.21.20"
APP_BTCPAY_SERVER_POSTGRES_IP="10.21.21.21"
APP_LNBITS_IP="10.21.21.29"
APP_LNBITS_PORT="3007"
APP_MEMPOOL_IP="10.21.21.26"
APP_MEMPOOL_PORT="3006"
APP_MEMPOOL_API_IP="10.21.21.27"
APP_MEMPOOL_DB_IP="10.21.21.28"
APP_SAMOURAI_SERVER_IP="10.21.21.22"
APP_SAMOURAI_SERVER_DOJO_PORT="3009"
APP_SAMOURAI_SERVER_CONNECT_PORT="3005"
APP_SAMOURAI_SERVER_WHIRLPOOL_IP="10.21.21.23"
APP_SAMOURAI_SERVER_WHIRLPOOL_PORT="8898"
APP_SAMOURAI_SERVER_DB_IP="10.21.21.24"
APP_SAMOURAI_SERVER_NODE_IP="10.21.21.25"
APP_PI_HOLE_PORT="8082"
APP_PI_HOLE_IP="10.21.21.36"
APP_HOME_ASSISTANT_PORT="8083"
APP_HOME_ASSISTANT_IP="10.21.21.37"
APP_GITEA_PORT="8085"
APP_GITEA_SSH_PORT="2222"
APP_GITEA_IP="10.21.21.39"
APP_GITEA_DB_IP="10.21.21.40"
APP_SIMPLE_TORRENT_PORT="8086"
APP_SIMPLE_TORRENT_IP="10.21.21.41"
APP_PHOTOPRISM_IP="10.21.21.42"
APP_PHOTOPRISM_PORT="8087"
APP_PHOTOPRISM_DB_IP="10.21.21.43"
APP_SYNAPSE_IP="10.21.21.44"
APP_SYNAPSE_PORT="8008"
APP_ELEMENT_IP="10.21.21.45"
APP_ELEMENT_PORT="8088"
APP_VAULTWARDEN_IP="10.21.21.46"
APP_VAULTWARDEN_PORT="8089"
APP_CODE_SERVER_IP="10.21.21.53"
APP_CODE_SERVER_PORT="8091"
APP_SQUEAKNODE_IP="10.21.21.54"
APP_SQUEAKNODE_PORT="12994"
APP_SQUEAKNODE_GRPC_PORT="8994"
APP_SQUEAKNODE_P2P_PORT="8555"
APP_SQUEAKNODE_P2P_TESTNET_PORT="18555"
APP_SQUEAKNODE_ENVOY_IP="10.21.21.55"
APP_SQUEAKNODE_ENVOY_PORT="15081"

DEVICE_HOSTNAME=subprocess.check_output("hostname").decode("utf-8").strip()
# run "which docker" using subprocess and read STDERR
DOCKER_EXECUTABLE=subprocess.check_output(["which", "docker"]).decode("utf-8").strip()
# Get the real path by following symlinks
DOCKER_BINARY=subprocess.check_output(["readlink",  "-f", DOCKER_EXECUTABLE]).decode("utf-8").strip()

# Set LND fee URL for neutrino on mainnet
LND_FEE_URL=""
# If the network is mainnet and status_dir/node-status-bitcoind-ready doesn't exist, set the FEE_URL
if BITCOIN_NETWORK == 'mainnet' and BITCOIN_NODE == 'neutrino':
   LND_FEE_URL="feeurl=https://nodes.lightning.computer/fees/v1/btc-fee-estimates.json"

# Checks if a variable with the name exists, if not, check if an env var with the name existts
# if neither exists, then exit with an error
def get_var(var_name, other_locals, file_name):
  if var_name in locals():
    return str(locals()[var_name])
  elif var_name in other_locals:
    return str(other_locals[var_name])
  elif var_name in globals():
    return str(globals()[var_name])
  else:
    print("Error: {} is not defined! (In file {})".format(var_name, file_name))
    exit(1)

# Converts a string to uppercase, also replaces all - with _
def convert_to_upper(string):
  return string.upper().replace('-', '_')

# Put variables in the config file. A config file accesses an env var $EXAMPLE_VARIABLE by containing <example-variable>
# in the config file. Check for such occurences and replace them with the actual variable
def replace_vars(file_path):
  with open(file_path, 'r') as file:
    file_contents = file.read()
  return re.sub(r'<(.*?)>', lambda m: get_var(convert_to_upper(m.group(1)), locals(), file_path), file_contents)

templates_to_build = {
  "./templates/torrc-apps-sample": "./tor/torrc-apps",
  "./templates/torrc-apps-2-sample": "./tor/torrc-apps-2",
  "./templates/torrc-apps-3-sample": "./tor/torrc-apps-3",
  "./templates/torrc-umbrel-sample": "./tor/torrc-umbrel",
  "./templates/lnd-sample.conf": "./lnd/lnd.conf",
  "./templates/bitcoin-sample.conf": "./bitcoin/bitcoin.conf",
  "./templates/.env-sample": "./.env",
  "./templates/electrs-sample.toml": "./electrs/electrs.toml",
  "./templates/nginx-sample.conf": "./nginx/nginx.conf"
}

print("Generating configuration files")
print()

# Loop through templates_to_build and build them
for template_path, output_path in templates_to_build.items():
  with open(output_path, 'w') as file:
    file.write(replace_vars(template_path))
      

print("Installing docker-compose")
print()
download_docker_compose()
print("Pulling Docker images")
print()
print("This may take a while, please be patient...")
os.system('docker compose pull')
print("Updating apps")
print()
os.system('./app/app-manager.py --invoked-by-configure update')
print("Configuring permissions")
print()
os.system('chown -R 1000:1000 {}'.format(UMBREL_ROOT))
# Touch status_dir/configured
with open(status_dir+'/configured', 'w') as file:
  file.write('')
print("Configuration successful")
print("You can now start Umbrel by running:")
print("  sudo ./scripts/start")
